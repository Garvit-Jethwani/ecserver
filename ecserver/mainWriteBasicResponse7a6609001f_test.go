// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type BasicResponse struct {
	Status int
	Message string
}

func TestWriteBasicResponse7a6609001f(t *testing.T) {
	// Test case 1: Successful response
	t.Run("successful response", func(t *testing.T) {
		resp := &BasicResponse{
			Status: http.StatusOK,
			Message: "success",
		}

		req, err := http.NewRequest("GET", "/dummy", nil)
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			writeBasicResponse(w, resp)
		})

		handler.ServeHTTP(rr, req)

		if status := rr.Code; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
		}

		expected := `{"Status":200,"Message":"success"}`
		if rr.Body.String() != expected {
			t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
		}
	})

	// Test case 2: Error in marshaling the response
	t.Run("error in marshaling response", func(t *testing.T) {
		resp := &BasicResponse{
			Status: http.StatusOK,
			Message: string([]byte{0x80, 0x81}), // Invalid UTF-8 string that causes json.Marshal to error
		}

		req, err := http.NewRequest("GET", "/dummy", nil)
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			writeBasicResponse(w, resp)
		})

		handler.ServeHTTP(rr, req)

		if status := rr.Code; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
		}

		expected := ``
		if rr.Body.String() != expected {
			t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
		}
	})
}

func writeBasicResponse(w http.ResponseWriter, resp *BasicResponse) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(resp.Status)
	respJson, err := json.Marshal(resp)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
		return
	}
	w.Write(respJson)
}