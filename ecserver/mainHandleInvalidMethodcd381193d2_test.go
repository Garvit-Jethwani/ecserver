// Test generated by RoostGPT for test test1 using AI Model gpt

```go
package main

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type BasicResponse struct {
	Status  int
	Message string
}

func handleInvalidMethod(w http.ResponseWriter, r *http.Request) {
	resp := &BasicResponse{
		Status:  http.StatusMethodNotAllowed,
		Message: "No such endpoint",
	}
	writeBasicResponse(w, resp)
}

func writeBasicResponse(w http.ResponseWriter, resp *BasicResponse) {
	w.WriteHeader(resp.Status)
	json.NewEncoder(w).Encode(resp)
}

func TestHandleInvalidMethod(t *testing.T) {
	req, err := http.NewRequest("GET", "/invalid", nil)
	if err != nil {
		t.Fatal(err)
	}
	
	// We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(handleInvalidMethod)

	// Our handlers satisfy http.Handler, so we can call their ServeHTTP method
	// directly and pass in our Request and ResponseRecorder.
	handler.ServeHTTP(rr, req)

	// Check the status code is what we expect.
	if status := rr.Code; status != http.StatusMethodNotAllowed {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusMethodNotAllowed)
	}

	// Check the response body is what we expect.
	expected := `{"Status":405,"Message":"No such endpoint"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}
}

func TestHandleInvalidMethodWithPost(t *testing.T) {
	req, err := http.NewRequest("POST", "/invalid", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(handleInvalidMethod)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusMethodNotAllowed {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusMethodNotAllowed)
	}

	expected := `{"Status":405,"Message":"No such endpoint"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}
}