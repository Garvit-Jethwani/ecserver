// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type AllCandidatesResponse struct {
	Candidates []string
}

var candidates = []string{"Candidate1", "Candidate2", "Candidate3"}

func TestWriteAllCandidatesResponsed5820cc2ae(t *testing.T) {
	t.Run("Successful JSON marshalling", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/candidates", nil)
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		handler := http.HandlerFunc(writeAllCandidatesResponse)

		handler.ServeHTTP(rr, req)

		if status := rr.Code; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		expected := &AllCandidatesResponse{
			Candidates: candidates,
		}
		response := &AllCandidatesResponse{}

		err = json.NewDecoder(rr.Body).Decode(response)
		if err != nil {
			t.Fatal(err)
		}

		if !reflect.DeepEqual(response, expected) {
			t.Errorf("handler returned unexpected body: got %v want %v",
				response, expected)
		}
	})

	t.Run("Unsuccessful JSON marshalling", func(t *testing.T) {
		originalCandidates := candidates
		defer func() { candidates = originalCandidates }() // restore original candidates after this test

		candidates = []string{"Candidate1", string([]byte{0x80, 0x81, 0x82, 0x83})} // invalid utf-8 sequence

		req, err := http.NewRequest("GET", "/candidates", nil)
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		handler := http.HandlerFunc(writeAllCandidatesResponse)

		handler.ServeHTTP(rr, req)

		if status := rr.Code; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		buf := new(bytes.Buffer)
		buf.ReadFrom(rr.Body)
		if buf.String() != "" {
			t.Errorf("handler returned unexpected body: got %v want empty string",
				buf.String())
		}
	})
}

func writeAllCandidatesResponse(w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	respJson, err := json.Marshal(&AllCandidatesResponse{
		Candidates: candidates,
	})
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
		return
	}
	w.Write(respJson)
}